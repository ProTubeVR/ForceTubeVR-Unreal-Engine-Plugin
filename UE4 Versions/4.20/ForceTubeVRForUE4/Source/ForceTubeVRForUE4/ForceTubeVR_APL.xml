<?xml version="1.0" encoding="utf-8"?>
<!--ARToolKit plugin additions-->
<root xmlns:android="http://schemas.android.com/apk/res/android">
  <init>
	<log text="ForceTubeVRPluginForAndroid init"/>
  </init>

  <AARImports>
     <insertValue value="repository $S(PluginDir)/../../Android/"/>
     <insertNewline/>
         <insert>com.ProTubeVR,ForceTubeVRInterface,1.0</insert>
     <insertNewline/>
   </AARImports>

  <androidManifestUpdates>
	  <addPermission android:name="android.permission.BLUETOOTH"/>
	  <addPermission android:name="android.permission.BLUETOOTH_ADMIN"/>
  </androidManifestUpdates>

  <buildGradleAdditions>
	  <insert>
          </insert>
  </buildGradleAdditions>

  <gameActivityImportAdditions>
          <insert>
import com.ProTubeVR.ForceTubeVRInterface.ForceTubeVRInterface;
import android.content.Context;
          </insert>
  </gameActivityImportAdditions>

  <gameActivityClassAdditions>
	<insert>

ForceTubeVRInterface forcetubevr;

public void InitForceTubeVR() {
	forcetubevr = new ForceTubeVRInterface(getBaseContext());
}

public void Kick(byte power){
	forcetubevr.sendKick(power);
}

public void Rumble(byte power, float duration){
	forcetubevr.sendRumble(power, (int)(duration * 1000.0f));
}

public void Shoot(byte kickPower, byte rumblePower, float rumbleDuration){
	forcetubevr.sendShot(kickPower, rumblePower, (int)(rumbleDuration * 1000.0f));
}

public void SetActiveResearch(boolean activeResearch){
	forcetubevr.setActiveResearch(activeResearch);
}

public byte TempoToKickPower(float tempo){
	return forcetubevr.tempoToKickPower(tempo);
}

public int GetBatteryLevel(){
	int percent = (int) forcetubevr.getBatteryPercent();
	if(percent == 255){
		return 0;
	}else{
		if(percent > 100){
			percent = 100;
		}
	}
	return percent;
}

public void OpenBluetoothSettings(boolean isInVR){
	forcetubevr.openBluetoothSettings(isInVR);
}

	</insert>
  </gameActivityClassAdditions>
</root>