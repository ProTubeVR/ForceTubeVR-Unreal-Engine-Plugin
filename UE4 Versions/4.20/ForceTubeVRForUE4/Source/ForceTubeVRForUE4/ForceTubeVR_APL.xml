<?xml version="1.0" encoding="utf-8"?>
<!--ARToolKit plugin additions-->
<root xmlns:android="http://schemas.android.com/apk/res/android">
  <init>
	<log text="ForceTubeVRPluginForAndroid init"/>
  </init>

  <AARImports>
     <insertValue value="repository $S(PluginDir)/../../Android/"/>
     <insertNewline/>
         <insert>com.ProTubeVR,ForceTubeVRInterface,1.0</insert>
     <insertNewline/>
   </AARImports>

  <androidManifestUpdates>
	  <addPermission android:name="android.permission.BLUETOOTH"/>
	  <addPermission android:name="android.permission.BLUETOOTH_ADMIN"/>
  </androidManifestUpdates>

  <buildGradleAdditions>
	  <insert>
          </insert>
  </buildGradleAdditions>

  <gameActivityImportAdditions>
          <insert>
import com.ProTubeVR.ForceTubeVRInterface.*;
import android.app.Activity;
          </insert>
  </gameActivityImportAdditions>

  <gameActivityClassAdditions>
	<insert>

ForceTubeVRInterface forcetubevr = null;


public void InitForceTubeVR(android.app.Activity gameActivity, boolean pistolsFirst) {
	ForceTubeVRInterfaceActivity.Call(gameActivity, pistolsFirst);
	while(forcetubevr == null){
		forcetubevr = ForceTubeVRInterfaceActivity.getInterface();
		try{
                    Thread.sleep(3);
                } catch(InterruptedException e) {
                    android.util.Log.e("ForceTubeVR", "ThreadError : Thread Interrupted");
                }
	}
}

public void Kick(byte power, int target){
	if (forcetubevr != null){
		forcetubevr.sendKick(power, target);
	}
}

public void Rumble(byte power, float duration, int target){
	if (forcetubevr != null){
		forcetubevr.sendRumble(power, (int)(duration * 1000.0f), target);
	}
}

public void Shoot(byte kickPower, byte rumblePower, float rumbleDuration, int target){
	if (forcetubevr != null){
		forcetubevr.sendShot(kickPower, rumblePower, (int)(rumbleDuration * 1000.0f), target);
	}
}

public void SetActiveResearch(boolean activeResearch){
	if (forcetubevr != null){
		forcetubevr.setActiveResearch(activeResearch);
	}
}

public byte TempoToKickPower(float tempo){
	if (forcetubevr != null){
		return forcetubevr.tempoToKickPower(tempo);
	} else {
		return 0;
	}
}

public int GetBatteryLevel(){
	if (forcetubevr != null){
		int percent = (int) forcetubevr.getBatteryPercent();
		if(percent == 255){
			return 0;
		}else{
			if(percent > 100){
				percent = 100;
			}
		}
		return percent;
	} else {
		return 0;
	}
}

public void OpenBluetoothSettings(){
	forcetubevr.openBluetoothSettings(false);
}

	</insert>
  </gameActivityClassAdditions>
</root>